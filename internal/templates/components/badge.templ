package components

type BadgeVariant string

const (
	BadgeDefault   BadgeVariant = "default"
	BadgePrimary   BadgeVariant = "primary"
	BadgeSecondary BadgeVariant = "secondary"
	BadgeSuccess   BadgeVariant = "success"
	BadgeWarning   BadgeVariant = "warning"
	BadgeDanger    BadgeVariant = "danger"
	BadgeInfo      BadgeVariant = "info"
)

type BadgeSize string

const (
	BadgeSizeSmall  BadgeSize = "sm"
	BadgeSizeMedium BadgeSize = "md"
	BadgeSizeLarge  BadgeSize = "lg"
)

templ Badge(text string, variant BadgeVariant, size BadgeSize) {
	<span class={
		"inline-flex items-center font-medium rounded-full",
		
		// Variantes
		templ.KV("badge-cear", variant == BadgeDefault || variant == BadgePrimary),
		templ.KV("bg-secondary-100 text-secondary-800", variant == BadgeSecondary),
		templ.KV("bg-green-100 text-green-800", variant == BadgeSuccess),
		templ.KV("bg-yellow-100 text-yellow-800", variant == BadgeWarning),
		templ.KV("bg-red-100 text-red-800", variant == BadgeDanger),
		templ.KV("bg-blue-100 text-blue-800", variant == BadgeInfo),
		
		// Tamanhos
		templ.KV("px-2 py-0.5 text-xs", size == BadgeSizeSmall),
		templ.KV("px-3 py-1 text-sm", size == BadgeSizeMedium),
		templ.KV("px-4 py-1.5 text-base", size == BadgeSizeLarge),
	}>
		{ text }
	</span>
}

templ BadgeWithIcon(text string, iconName string, variant BadgeVariant, size BadgeSize) {
	<span class={
		"inline-flex items-center font-medium rounded-full",
		
		// Variantes
		templ.KV("badge-cear", variant == BadgeDefault || variant == BadgePrimary),
		templ.KV("bg-secondary-100 text-secondary-800", variant == BadgeSecondary),
		templ.KV("bg-green-100 text-green-800", variant == BadgeSuccess),
		templ.KV("bg-yellow-100 text-yellow-800", variant == BadgeWarning),
		templ.KV("bg-red-100 text-red-800", variant == BadgeDanger),
		templ.KV("bg-blue-100 text-blue-800", variant == BadgeInfo),
		
		// Tamanhos
		templ.KV("px-2 py-0.5 text-xs", size == BadgeSizeSmall),
		templ.KV("px-3 py-1 text-sm", size == BadgeSizeMedium),
		templ.KV("px-4 py-1.5 text-base", size == BadgeSizeLarge),
	}>
		if iconName != "" {
			<span class="mr-1">
				if size == BadgeSizeSmall {
					@Icon(iconName, "w-3 h-3")
				} else if size == BadgeSizeLarge {
					@Icon(iconName, "w-5 h-5")
				} else {
					@Icon(iconName, "w-4 h-4")
				}
			</span>
		}
		{ text }
	</span>
}

templ StatusBadge(status string) {
	if status == "active" || status == "online" || status == "success" {
		@Badge("Ativo", BadgeSuccess, BadgeSizeMedium)
	} else if status == "pending" || status == "processing" {
		@Badge("Pendente", BadgeWarning, BadgeSizeMedium)
	} else if status == "inactive" || status == "offline" || status == "error" {
		@Badge("Inativo", BadgeDanger, BadgeSizeMedium)
	} else if status == "draft" {
		@Badge("Rascunho", BadgeSecondary, BadgeSizeMedium)
	} else {
		@Badge(status, BadgeDefault, BadgeSizeMedium)
	}
}

templ DotBadge(variant BadgeVariant) {
	<span class={
		"inline-flex w-2 h-2 rounded-full",
		
		// Variantes
		templ.KV("bg-primary-500", variant == BadgeDefault || variant == BadgePrimary),
		templ.KV("bg-secondary-500", variant == BadgeSecondary),
		templ.KV("bg-green-500", variant == BadgeSuccess),
		templ.KV("bg-yellow-500", variant == BadgeWarning),
		templ.KV("bg-red-500", variant == BadgeDanger),
		templ.KV("bg-blue-500", variant == BadgeInfo),
	}>
	</span>
} 